<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>com.example</groupId>
  <artifactId>october</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <modules>
    <module>application</module>
    <module>engine</module>
  </modules>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <maven.compiler.source>21</maven.compiler.source>
    <maven.compiler.target>21</maven.compiler.target>

    <micronaut.version>4.5.0</micronaut.version>
    <micronaut.test.version>4.2.0</micronaut.test.version>
    <lombok.version>1.18.42</lombok.version>
    <junit.jupiter.version>5.10.0</junit.jupiter.version>
    <assertj.version>3.24.2</assertj.version>
    <mockito.version>5.12.0</mockito.version>
    <maven-surefire-plugin.version>3.1.2</maven-surefire-plugin.version>
    <maven-failsafe-plugin.version>3.1.2</maven-failsafe-plugin.version>
    <jacoco-maven-plugin.version>0.8.10</jacoco-maven-plugin.version>
    <lwjgl-bom.version>3.3.6</lwjgl-bom.version>
    <slf4j-api.version>2.0.17</slf4j-api.version>
    <logback-classic.version>1.5.18</logback-classic.version>
    <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
    <jakarta.inject-api.version>2.0.1</jakarta.inject-api.version>
    <joml.version>1.10.5</joml.version>
    <byte-buddy.version>1.14.17</byte-buddy.version>
    <archunit.version>1.3.0</archunit.version>
    <spotless-maven-plugin.version>2.45.0</spotless-maven-plugin.version>
    <versions-maven-plugin.version>2.16.1</versions-maven-plugin.version>

    <!-- JaCoCo Properties -->
    <jacoco.ut.execution.data.file>${project.build.directory}/coverage-reports/jacoco-ut.exec</jacoco.ut.execution.data.file>
    <jacoco.it.execution.data.file>${project.build.directory}/coverage-reports/jacoco-it.exec</jacoco.it.execution.data.file>
    <jacoco.merged.execution.data.file>${project.build.directory}/coverage-reports/jacoco.exec</jacoco.merged.execution.data.file>

  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- Project Modules -->
      <dependency>
        <groupId>com.example</groupId>
        <artifactId>engine</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>org.joml</groupId>
        <artifactId>joml</artifactId>
        <version>${joml.version}</version>
      </dependency>

      <!-- Micronaut -->
      <dependency>
        <groupId>io.micronaut</groupId>
        <artifactId>micronaut-inject</artifactId>
        <version>${micronaut.version}</version>
      </dependency>

      <dependency>
        <groupId>io.micronaut</groupId>
        <artifactId>micronaut-inject-java</artifactId>
        <version>${micronaut.version}</version>
        <scope>provided</scope>
      </dependency>

      <dependency>
        <groupId>io.micronaut</groupId>
        <artifactId>micronaut-context</artifactId>
        <version>${micronaut.version}</version>
      </dependency>

      <dependency>
        <groupId>io.micronaut</groupId>
        <artifactId>micronaut-runtime</artifactId>
        <version>${micronaut.version}</version>
      </dependency>

      <dependency>
        <groupId>jakarta.inject</groupId>
        <artifactId>jakarta.inject-api</artifactId>
        <version>${jakarta.inject-api.version}</version>
      </dependency>

      <dependency>
        <groupId>net.bytebuddy</groupId>
        <artifactId>byte-buddy</artifactId>
        <version>${byte-buddy.version}</version>
      </dependency>

      <!-- Lombok -->
      <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>${lombok.version}</version>
        <scope>provided</scope>
      </dependency>

      <!-- LWJGL -->
      <dependency>
        <groupId>org.lwjgl</groupId>
        <artifactId>lwjgl-bom</artifactId>
        <version>${lwjgl-bom.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>

      <!-- Logging -->
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>${slf4j-api.version}</version>
      </dependency>

      <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>${logback-classic.version}</version>
      </dependency>

      <!-- Testing -->
      <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-api</artifactId>
        <version>${junit.jupiter.version}</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-engine</artifactId>
        <version>${junit.jupiter.version}</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>org.assertj</groupId>
        <artifactId>assertj-bom</artifactId>
        <version>${assertj.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>io.micronaut.test</groupId>
        <artifactId>micronaut-test-junit5</artifactId>
        <version>${micronaut.test.version}</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <version>${mockito.version}</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>com.tngtech.archunit</groupId>
        <artifactId>archunit-junit5</artifactId>
        <version>${archunit.version}</version>
        <scope>test</scope>
      </dependency>

    </dependencies>
  </dependencyManagement>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven-compiler-plugin.version}</version>
          <configuration>
            <annotationProcessorPaths>
              <path>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
              </path>
              <path>
                <groupId>io.micronaut</groupId>
                <artifactId>micronaut-inject-java</artifactId>
                <version>${micronaut.version}</version>
              </path>
            </annotationProcessorPaths>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven-surefire-plugin.version}</version>
          <configuration>
            <!--suppress MavenModelInspection -->
            <argLine>${jacoco.surefire.argLine} --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED -XX:+EnableDynamicAgentLoading -Xshare:off</argLine>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${maven-failsafe-plugin.version}</version>
          <configuration>
            <!--suppress MavenModelInspection -->
            <argLine>${jacoco.failsafe.argLine} --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED -XX:+EnableDynamicAgentLoading -Xshare:off</argLine>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>integration-test</goal>
                <goal>verify</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${jacoco-maven-plugin.version}</version>
          <executions>
            <!-- Prepare agent for unit tests -->
            <execution>
              <id>prepare-agent</id>
              <goals>
                <goal>prepare-agent</goal>
              </goals>
              <configuration>
                <destFile>${jacoco.ut.execution.data.file}</destFile>
                <propertyName>jacoco.surefire.argLine</propertyName>
              </configuration>
            </execution>
            <!-- Generate report for unit tests -->
            <execution>
              <id>report-ut</id>
              <phase>test</phase>
              <goals>
                <goal>report</goal>
              </goals>
              <configuration>
                <dataFile>${jacoco.ut.execution.data.file}</dataFile>
                <outputDirectory>${project.build.directory}/site/jacoco-ut</outputDirectory>
              </configuration>
            </execution>
            <!-- Prepare agent for integration tests -->
            <execution>
              <id>prepare-agent-it</id>
              <phase>pre-integration-test</phase>
              <goals>
                <goal>prepare-agent-integration</goal>
              </goals>
              <configuration>
                <destFile>${jacoco.it.execution.data.file}</destFile>
                <propertyName>jacoco.failsafe.argLine</propertyName>
              </configuration>
            </execution>
            <!-- Generate report for integration tests -->
            <execution>
              <id>report-it</id>
              <phase>post-integration-test</phase>
              <goals>
                <goal>report</goal>
              </goals>
              <configuration>
                <dataFile>${jacoco.it.execution.data.file}</dataFile>
                <outputDirectory>${project.build.directory}/site/jacoco-it</outputDirectory>
              </configuration>
            </execution>
            <!-- Merge unit and integration test reports -->
            <execution>
              <id>merge-reports</id>
              <phase>verify</phase>
              <goals>
                <goal>merge</goal>
              </goals>
              <configuration>
                <destFile>${jacoco.merged.execution.data.file}</destFile>
                <fileSets>
                  <fileSet>
                    <directory>${project.build.directory}/coverage-reports</directory>
                    <includes>
                      <include>*.exec</include>
                    </includes>
                  </fileSet>
                </fileSets>
              </configuration>
            </execution>
            <!-- Generate merged report -->
            <execution>
              <id>report-merged</id>
              <phase>verify</phase>
              <goals>
                <goal>report</goal>
              </goals>
              <configuration>
                <dataFile>${jacoco.merged.execution.data.file}</dataFile>
                <outputDirectory>${project.build.directory}/site/jacoco</outputDirectory>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!-- Spotless code style plugin: configured but not bound to lifecycle (informational only) -->
        <plugin>
          <groupId>com.diffplug.spotless</groupId>
          <artifactId>spotless-maven-plugin</artifactId>
          <version>${spotless-maven-plugin.version}</version>
          <configuration>
            <!-- Do not enforce in lifecycle; run manually with `mvn spotless:check` or `mvn spotless:apply` -->
            <lineEndings>GIT_ATTRIBUTES</lineEndings>
            <encoding>${project.build.sourceEncoding}</encoding>
            <java>
              <includes>
                <include>src/*/java/**/*.java</include>
              </includes>
              <!-- Minimal, non-invasive checks -->
              <trimTrailingWhitespace/>
              <endWithNewline/>
            </java>
            <pom>
              <trimTrailingWhitespace/>
              <endWithNewline/>
            </pom>
          </configuration>
        </plugin>
        <!-- Versions plugin: available for manual use, no lifecycle bindings -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>versions-maven-plugin</artifactId>
          <version>${versions-maven-plugin.version}</version>
          <configuration>
            <!-- When running update goals manually, avoid creating backup poms by default -->
            <generateBackupPoms>false</generateBackupPoms>
            <processAllModules>true</processAllModules>
            <allowSnapshots>false</allowSnapshots>
            <!-- Rules to ignore unstable versions (alpha, beta, milestone, RC, snapshot, preview) -->
            <!-- Note: Run from project root directory for rules to work across all modules -->
            <rulesUri>file:///${project.basedir}/maven-version-rules.xml</rulesUri>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <!-- Make versions plugin available via short form (e.g., `mvn versions:display-dependency-updates`) -->
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>${versions-maven-plugin.version}</version>
      </plugin>
    </plugins>
  </build>

  <distributionManagement>
    <repository>
      <id>github</id>
      <name>GitHub Packages</name>
      <url>https://maven.pkg.github.com/TheStackTraceWhisperer/october</url>
    </repository>
    <snapshotRepository>
      <id>github</id>
      <name>GitHub Packages</name>
      <url>https://maven.pkg.github.com/TheStackTraceWhisperer/october</url>
    </snapshotRepository>
  </distributionManagement>

</project>
